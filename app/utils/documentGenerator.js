import * as XLSX from 'xlsx';
import { Buffer } from 'buffer';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

/**
 * Generate a PDF using jsPDF (web-compatible)
 * @param {object} document - Document metadata
 * @param {Array} bodyInfo - Array of employee data
 * @returns {ArrayBuffer} PDF file as ArrayBuffer
 */
export const generatePDF = (document, bodyInfo) => {
  const doc = new jsPDF();
  doc.setFontSize(16);
  doc.text('Employee Attendance Report', 14, 15);
  doc.setFontSize(10);
  doc.text(`Document Code: ${document.code}`, 14, 25);
  doc.text(`Date: ${document.document_date}`, 14, 30);
  doc.text(`Status: ${document.status}`, 14, 35);
  doc.autoTable({
    startY: 40,
    head: [['Name', 'Entry Time', 'Exit Time']],
    body: bodyInfo.map(row => [row.name, row.entry, row.exit]),
    theme: 'grid',
    styles: { fontSize: 10, cellPadding: 5 },
    headStyles: { fillColor: [25, 118, 210], textColor: 255, fontSize: 12, fontStyle: 'bold' },
  });
  doc.setFontSize(10);
  doc.text('Generated by Digital Assistant', 14, doc.internal.pageSize.getHeight() - 20);
  doc.text(new Date().toLocaleDateString(), 14, doc.internal.pageSize.getHeight() - 14);
  return doc.output('arraybuffer');
};

/**
 * Generate a plain text file
 */
export const generateText = (document, bodyInfo) => {
  const header = [
    '='.repeat(50),
    'EMPLOYEE ATTENDANCE REPORT',
    '='.repeat(50),
    '',
    `Document Code: ${document.code}`,
    `Date: ${document.document_date}`,
    `Status: ${document.status}`,
    '',
    '-'.repeat(50)
  ].join('\n');

  const tableHeader = [
    'Name'.padEnd(30) + 'Entry Time'.padEnd(15) + 'Exit Time',
    '-'.repeat(50)
  ].join('\n');

  const rows = bodyInfo.map((row, idx) => 
    `${(idx + 1).toString().padStart(2)}. ${row.name.padEnd(27)} ${row.entry.padEnd(15)} ${row.exit}`
  );

  const footer = [
    '',
    '-'.repeat(50),
    `Generated by Digital Assistant on ${new Date().toLocaleDateString()}`,
    '='.repeat(50)
  ].join('\n');

  const content = [header, tableHeader, ...rows, footer].join('\n');
  return Buffer.from(content);
};

/**
 * Generate a CSV file
 */
export const generateCSV = (document, bodyInfo) => {
  const header = [
    'Document Information',
    `Code,${document.code}`,
    `Date,${document.document_date}`,
    `Status,${document.status}`,
    '',
    'Employee Attendance',
    'Name,Entry Time,Exit Time'
  ];

  const rows = bodyInfo.map(row => 
    `${row.name},${row.entry},${row.exit}`
  );

  const footer = [
    '',
    'Generated Information',
    `Generated By,Digital Assistant`,
    `Generated Date,${new Date().toLocaleDateString()}`
  ];

  const content = [...header, ...rows, ...footer].join('\n');
  return Buffer.from(content);
};

/**
 * Generate an Excel file (XLSX)
 */
export const generateExcel = (document, bodyInfo) => {
  // Create workbook
  const workbook = XLSX.utils.book_new();

  // Create header info
  const headerInfo = [
    ['EMPLOYEE ATTENDANCE REPORT'],
    [''],
    [`Document Code: ${document.code}`],
    [`Date: ${document.document_date}`],
    [`Status: ${document.status}`],
    ['']
  ];

  // Create data
  const data = bodyInfo.map(row => ({
    Name: row.name,
    'Entry Time': row.entry,
    'Exit Time': row.exit
  }));

  // Create worksheet
  const worksheet = XLSX.utils.json_to_sheet(data, { origin: 'A7' });

  // Add header info
  XLSX.utils.sheet_add_aoa(worksheet, headerInfo, { origin: 'A1' });

  // Add footer
  const footerInfo = [
    [''],
    ['Generated Information'],
    [`Generated By: Digital Assistant`],
    [`Generated Date: ${new Date().toLocaleDateString()}`]
  ];
  XLSX.utils.sheet_add_aoa(worksheet, footerInfo, { origin: 'A' + (data.length + 9) });

  // Style the worksheet
  worksheet['!cols'] = [
    { wch: 30 }, // Name column
    { wch: 15 }, // Entry Time column
    { wch: 15 }  // Exit Time column
  ];

  // Add the worksheet to workbook
  XLSX.utils.book_append_sheet(workbook, worksheet, 'Attendance');

  // Generate Excel file
  const excelBuffer = XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });
  return Buffer.from(excelBuffer);
}; 