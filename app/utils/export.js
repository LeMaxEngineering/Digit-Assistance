import * as XLSX from 'xlsx';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { supabase } from '../config/supabase';

// Remove EmailJS imports and initialization
// const PUBLIC_KEY = EMAILJS_PUBLIC_KEY;
// const SERVICE_ID = EMAILJS_SERVICE_ID;
// const TEMPLATE_ID = EMAILJS_TEMPLATE_ID;

// Initialize EmailJS
// emailjs.init(PUBLIC_KEY);

export const exportToXLS = (data, filename, documentData) => {
  // Create a new workbook
  const wb = XLSX.utils.book_new();
  
  // Create header info
  const headerInfo = [
    ['Attendance Record'],
    [''],
    [`Company: ${documentData.company_name}`],
    [`Place: ${documentData.place_name || documentData.company_name}`],
    [`Date: ${new Date(documentData.date).toLocaleDateString()}`],
    [`Generated by: ${documentData.user?.name || 'User'}`],
    ['']
  ];
  
  // Convert data to worksheet
  const ws = XLSX.utils.json_to_sheet(data.map(row => ({
    'Name': row.name,
    'Time In': row.timeIn || '--:--',
    'Time Out': row.timeOut || '--:--'
  })), { origin: 'A8' }); // Start data from row 8

  // Add header info
  XLSX.utils.sheet_add_aoa(ws, headerInfo, { origin: 'A1' });

  // Add footer
  const footerInfo = [
    [''],
    ['Generated Information'],
    [`Generated By: Digital Assistant`],
    [`Generated Date: ${new Date().toLocaleDateString()}`]
  ];
  XLSX.utils.sheet_add_aoa(ws, footerInfo, { origin: 'A' + (data.length + 10) });

  // Style the worksheet
  ws['!cols'] = [
    { wch: 30 }, // Name column
    { wch: 15 }, // Time In column
    { wch: 15 }  // Time Out column
  ];

  // Add the worksheet to workbook
  XLSX.utils.book_append_sheet(wb, ws, 'Attendance');

  // Generate Excel file
  XLSX.writeFile(wb, `${filename}.xlsx`);
};

export const exportToCSV = (data, filename) => {
  // Create CSV content
  const headers = ['Name', 'Entry Time', 'Exit Time'];
  const csvContent = [
    headers.join(','),
    ...data.map(row => [
      `"${row.name}"`,
      `"${row.entry}"`,
      `"${row.exit}"`
    ].join(','))
  ].join('\n');

  // Create and download file
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = `${filename}.csv`;
  link.click();
};

export const exportToPDF = async (documentData) => {
  const doc = new jsPDF();
  
  // Add title
  doc.setFontSize(16);
  doc.text('Attendance Record', 14, 15);
  
  // Add document info
  doc.setFontSize(10);
  doc.text(`Company: ${documentData.company_name}`, 14, 25);
  doc.text(`Place: ${documentData.place_name || documentData.company_name}`, 14, 30);
  doc.text(`Date: ${new Date(documentData.date).toLocaleDateString()}`, 14, 35);
  doc.text(`Generated by: ${documentData.user?.name || 'User'}`, 14, 40);

  // Add employee data
  const employeeData = documentData.employeeData;
  doc.autoTable({
    startY: 50,
    head: [['Name', 'Time In', 'Time Out']],
    body: employeeData.map(row => [row.name, row.timeIn || '--:--', row.timeOut || '--:--']),
    theme: 'grid',
    styles: {
      fontSize: 10,
      cellPadding: 5,
    },
    headStyles: {
      fillColor: [41, 128, 185],
      textColor: 255,
      fontSize: 12,
      fontStyle: 'bold',
    },
  });

  // Add footer
  doc.setFontSize(8);
  doc.text('Generated by Digital Assistant', 14, doc.internal.pageSize.getHeight() - 20);
  doc.text(new Date().toLocaleDateString(), 14, doc.internal.pageSize.getHeight() - 14);

  // Return as blob
  return doc.output('blob');
};

export const uploadFileToSupabase = async (blob, path) => {
  const { data, error } = await supabase.storage
    .from('documents')
    .upload(path, blob, { 
      upsert: true, 
      contentType: 'application/pdf' 
    });
  
  if (error) throw error;
  
  const { data: urlData } = supabase.storage
    .from('documents')
    .getPublicUrl(path);
  
  return urlData.publicUrl;
};

// Enhanced data compression utility
const compressData = (data) => {
  if (data === undefined || data === null) {
    return '';
  }
  
  // Convert to string if not already
  const stringData = typeof data === 'string' ? data : JSON.stringify(data);
  
  return stringData
    .replace(/\s+/g, '')  // Remove whitespace
    .replace(/"/g, "'")   // Use single quotes
    .replace(/,/g, ';')   // Replace commas with semicolons
    .replace(/\n/g, '|'); // Replace newlines with pipes
};

// Split large data into chunks
const splitData = (data, maxSize = 40000) => { // 40KB to leave room for other params
  const compressed = compressData(data);
  if (compressed.length <= maxSize) {
    return [compressed];
  }
  
  // Split into chunks
  const chunks = [];
  let currentChunk = '';
  const items = compressed.split('|');
  
  for (const item of items) {
    if ((currentChunk + item).length > maxSize) {
      chunks.push(currentChunk);
      currentChunk = item;
    } else {
      currentChunk += (currentChunk ? '|' : '') + item;
    }
  }
  
  if (currentChunk) {
    chunks.push(currentChunk);
  }
  
  return chunks;
};

// Helper function to get MIME type based on format
const getMimeType = (format) => {
  switch (format.toLowerCase()) {
    case 'pdf':
      return 'application/pdf';
    case 'csv':
      return 'text/csv';
    case 'xls':
    case 'xlsx':
      return 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    default:
      return 'application/octet-stream';
  }
}; 